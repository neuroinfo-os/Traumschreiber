works:
	fetching AD data
		from all 3 AD's in parallel
		in 32 Byte packets each
		if data from all 3 is there and send buffer has space: try to filter/encode, write to send buffer and then send
	sending via BLE
		packages are (by default) distributed over three characteristics
		only fetching/sending if other device is connected and has enabled notifications on all three characteristics (both nicely triggered on BLE-events)
		in 20 Byte packets
		trying to send on each recieved AD packet
			buffer-full check is now dirty (just checks if there is at least 20 packets read capacity plus new package and ignores write capacity)
	filtering
		biquad cascade IIR filters from arm_math package for M4
			two instances per channel
				high pass, low pass and notch
				coefficients (and order) are configurable via config characteristic
		turned on by default, circumvented if dummy data is transmitted
	encoding
		put all 24 channels in 1.5 packages as difference (dcpm) values with 10Bit each
			values are shifted (aka least significant Bits are dropped) according to current variance
			amount of shifting is pushed out via 'C0DE' characteristic every second data points as notification
				also includes, how many packages have been dropped since the last C0DE update
	dummy data generation
		can be toggeled via config characteristic (see below)
		data gets generated every time a sample from the ADs come in
		it is possible to have generated and sampled data (see below)
		only generates 8 channels anyways
	battery reading
		works now
		AUXAIN register of AD1 (of 0-2) is read and written into byte 3&4 of config characteristic
		happens at startup and if notifications are disabled on one characteristic (of 4)
	configuration characteristic, 8 Bytes total (default setting for each Byte in parenthesis)
		Byte 0: (0x00)
			xxoo oooo: gain (00: 1, 01: 2, 10: 4, 11:8)
			oooo xooo: if set, running average filter (encoding) is active
			oooo oxoo: if set, data is only send via first characteristic
			oooo ooxo: generate data (0: off, 1: on)
		Byte 1: (0x00)
			reserved
		Byte 2: (0x01)
			xxxx oooo: 1st-order high pass
							0: off
							1: RC=0.5Hz
							2: RC=1.3Hz
			oooo xxxx: IIR high pass
							0: off
							1: FolterCoeff_HighPass_I_fs500_L1_O4
							2: FolterCoeff_HighPass_II_fs500_L1_7_O4
							3: FolterCoeff_HighPass_III_fs500_L0_8_O2
							4: FolterCoeff_HighPass_IV_fs500_L1_7_O2
		Byte 3: (0x11)
			xxxx oooo: Low pass
							0: off
							1: FolterCoeff_LowPass_I_fs500_L45_O4
							2: FolterCoeff_LowPass_II_fs500_L60_O6
			oooo xxxx: Filter 50 Hz
							0: off
							1: FolterCoeff_Notch_I_fs500_L46_H54_O6
							2: FolterCoeff_Notch_II_fs500_L48_H52_O6
							3: FolterCoeff_Notch_III_fs500_L46_H54_O4
							4: FolterCoeff_Notch_IV_fs500_L48_H52_O4
		Byte 4: (0x0F)
			xxxx oooo: min of bitshift
			oooo xxxx: max of bitshift
		Byte 5: (0x00)
			reserved
		Byte 6 & 7: battery status

2: 1order high pass (running average ) with 0.5Hz and 1.3 Hz
4: IIR high pass  - with 0.5Hz (O6) and 1.3Hz (O6) 0.5Hz (O8)  1.3 Hz (O8)
4: Filter 50 Hz  (similar O6 and 06 with different width)
2: Low pass with cut at 40 and at 60 Hz (bearbeitet) 
		
		
		
		
constraints:
	datarate: sampled down from 500 to 167Hz
		still 250Hz of packages is send
error output
	LED 18 is turned on when a packet is dropped internally and turned off again when one is succesfully cued
	LED 20 is turned on when AD0 is signalling available data und turned on once internal processing starts (after SPI transfer). 
	
